include:
  - local: 'ci-templates/environments/*.yml'


variables:
  RUNNER_TAGS: dev
  TF_VERSION: "1.3.6"
  TF_CLOUD_CREDENTIALS: |
    credentials "app.terraform.io" {
      token = "${TF_CLOUD_TEAM_TOKEN}"
    }


stages:
  - infra:validate
  - infra:plan
  - infra:apply
  - app:test
  - app:package
  - app:deploy


image:
  name: hashicorp/terraform:${TF_VERSION}
  entrypoint: [""]


.terraform:
  variables:
    PLAN: ${TF_WORKSPACE}.tfplan
    PLAN_JSON: ${TF_WORKSPACE}-plan.json
    OUTPUT: ${TF_WORKSPACE}-out.json
  before_script:
    - cd infra
    - apk add --update --no-cache jq aws-cli gettext bash
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    - echo "${TF_CLOUD_CREDENTIALS}" > "${HOME}/.terraformrc"
    - terraform --version
    - terraform init -upgrade
    - terraform workspace list
  rules:
    - changes: 
        - infra/**/*
    - if: $CI_PIPELINE_SOURCE == "web"
  cache:
    key: ${TF_WORKSPACE}-$CI_COMMIT_REF_SLUG
    paths:
      - infra/.terraform
  tags:
    - ${RUNNER_TAGS}


.terraform:validate:
  extends: .terraform
  stage: infra:validate
  script:
    - terraform validate


.terraform:plan:
  extends: .terraform
  stage: infra:plan
  script:
    - terraform plan -out=$PLAN
    - terraform show --json $PLAN | convert_report > $PLAN_JSON
  artifacts:
    reports:
      terraform: infra/${PLAN_JSON}
    paths:
      - infra/${PLAN}
  resource_group: ${TF_WORKSPACE}


.terraform:apply:
  extends: .terraform
  stage: infra:apply
  script:
    - terraform apply $PLAN
    - terraform output -json >> $OUTPUT
  artifacts:
    paths:
      - infra/$OUTPUT
  rules:
    - changes: 
        - infra/**/*
      when: manual
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
  resource_group: ${TF_WORKSPACE}
  environment:
    name: ${TF_WORKSPACE}


.terraform:destroy-plan:
  extends: .terraform:plan
  script:
    - terraform plan -destroy -out=$PLAN
  when: manual


.terraform:destroy-apply:
  extends: .terraform:apply
  script:
    - terraform apply -destroy $PLAN
  when: manual


####################################################
# APPLICAIONS
####################################################

.app:
  image: composer:latest
  before_script:
    - cd app/$APP && pwd
    - composer --version
    - php --version
  # rules:
  #   - changes: 
  #       - app/**/*
  #   - if: $CI_PIPELINE_SOURCE == "web"
  cache:
    key: ${TF_WORKSPACE}-$CI_COMMIT_REF_SLUG
    paths:
      - app/$APP/vendor
  tags:
    - ${RUNNER_TAGS}


.app:test:
  extends: .app
  stage: app:test
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - ./vendor/bin/phpunit --verbose tests


.app:package:
  extends: .app
  image: docker:latest
  stage: app:package
  services:
    - docker:dind
  before_script:
    - cd app/$APP && pwd
    - apk add --update --no-cache aws-cli
  script:
    - REPOSITORY=$(aws ecr describe-repositories --repository-name ${APP} --query "repositories[].repositoryUri" --output text)
    - aws ecr get-login-password | docker login --username AWS --password-stdin $REPOSITORY
    - docker build --tag $REPOSITORY:$CI_COMMIT_SHORT_SHA --tag $REPOSITORY:latest .
    - docker push $REPOSITORY:$CI_COMMIT_SHORT_SHA
    - docker push $REPOSITORY:latest


.app:deploy:
  extends: .app
  image: docker:latest
  stage: app:deploy
  before_script:
    - apk add --update --no-cache aws-cli jq
  script:
    - NEW_IMAGE=$(aws ecr describe-repositories --repository-name ${APP} --query "repositories[].repositoryUri" --output text):$CI_COMMIT_SHORT_SHA
    - CURRENT_TASK=$(aws ecs describe-task-definition --task-definition "${TASK_FAMILY}")
    - NEW_TASK=$(echo $CURRENT_TASK | jq --arg IMAGE "${NEW_IMAGE}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
    - NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK")
    - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
    - UPDATE_SERVICE=$(aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition "${TASK_FAMILY}:$NEW_REVISION")
    - echo $UPDATE_SERVICE