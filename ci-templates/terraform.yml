include:
  - local: 'ci-templates/workspaces/*.yml'


variables:
  RUNNER_TAGS: dev
  TF_VERSION: "1.3.6"
  TF_CLOUD_CREDENTIALS: |
    credentials "app.terraform.io" {
      token = "${TF_CLOUD_TEAM_TOKEN}"
    }


image:
  name: hashicorp/terraform:${TF_VERSION}
  entrypoint: [""]


.terraform:
  variables:
    PLAN: ${TF_WORKSPACE}.tfplan
    PLAN_JSON: ${TF_WORKSPACE}-plan.json
  before_script:
    - cd infra
    - apk add --update --no-cache jq aws-cli gettext bash
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    - echo "${TF_CLOUD_CREDENTIALS}" > "${HOME}/.terraformrc"
    - terraform --version
    - terraform init -upgrade
    - terraform workspace list
  rules:
    - changes: 
        - infra/**/*
    - if: $CI_PIPELINE_SOURCE == "web"
  cache:
    key: ${TF_WORKSPACE}-$CI_COMMIT_REF_SLUG
    paths:
      - infra/.terraform


stages:
  - infra:validate
  - infra:plan
  - infra:apply
  - deploy


dev:infra:validate:
  extends: 
    - .dev:ro
    - .terraform
  stage: infra:validate
  tags:
    - ${RUNNER_TAGS}
  script:
    - terraform validate


dev:infra:plan:
  extends: 
    - .dev:ro
    - .terraform
  stage: infra:plan
  tags:
    - ${RUNNER_TAGS}
  script:
    - terraform plan -out=$PLAN
    - terraform show --json $PLAN | convert_report > $PLAN_JSON
  artifacts:
    reports:
      terraform: infra/${PLAN_JSON}
    paths:
      - infra/${PLAN}
  resource_group: ${TF_WORKSPACE}
  needs:
    - dev:infra:validate


dev:infra:apply:
  extends: 
    - .dev:rw
    - .terraform
  stage: infra:apply
  tags:
    - ${RUNNER_TAGS}
  script:
    - terraform apply $PLAN
  rules:
    - changes: 
        - infra/**/*
      when: manual
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
  resource_group: ${TF_WORKSPACE}
  environment:
    name: ${TF_WORKSPACE}
  needs:
    - dev:infra:plan


dev:infra:destroy-plan:
  extends: 
    - .dev:ro
    - .terraform
  stage: infra:plan
  script:
    - terraform plan -destroy -out=$PLAN
  when: manual


dev:infra:destroy-apply:
  extends:
    - .dev:rw
    - .terraform
  stage: infra:apply
  script:
    - terraform apply -destroy $PLAN
  needs:
    - dev:infra:destroy-plan
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never
  